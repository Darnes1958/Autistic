<?php

namespace App\Filament\User\Pages;

use App\Livewire\Traits\PublicTrait;
use App\Models\autistic;
use App\Models\Center;
use App\Models\Family;
use App\Models\Near;
use App\Models\Street;
use Awcodes\TableRepeater\Components\TableRepeater;
use Awcodes\TableRepeater\Header;
use Filament\Forms\Components\Actions;
use Filament\Forms\Components\Actions\Action;
use Filament\Forms\Components\Fieldset;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\Grid;
use Filament\Forms\Components\Hidden;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Concerns\InteractsWithForms;
use Filament\Forms\Contracts\HasForms;
use Filament\Forms\Form;
use Filament\Forms\Get;
use Filament\Forms\Set;
use Filament\Pages\Page;
use Illuminate\Contracts\Support\Htmlable;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Auth;

class createFamily extends Page implements HasForms
{
    use InteractsWithForms,PublicTrait;
    protected static ?string $navigationIcon = 'heroicon-o-document-text';

    protected static string $view = 'filament.user.pages.create-family';

    protected static ?string $navigationLabel='بيانات عن الأسرة';
    protected ?string $heading='بيانات عن الأسرة';
    public static function getNavigationIcon(): string|Htmlable|null
    {
        if (Auth::user()->has_fam)
            return 'heroicon-o-check';
        return null;

    }
    public static function getNavigationBadge(): ?string
    {
        if (!Auth::user()->has_fam)
         return 'لم يتم ادخال البيانات';
        else return null;
    }
    public static function getNavigationBadgeColor(): string|array|null
    {
        return 'danger'; // TODO: Change the autogenerated stub
    }


    public ?array $data = [];
    public $fam;
    public function mount(): void
    {
        $this->fam=Family::where('user_id',Auth::id())->first();
        if ($this->fam)
            $this->form->fill($this->fam->toArray());
        else
        {

            if (Auth::user()->has_aut)
            $this->form->fill(['father_name'=>Auth::user()->has_aut->surname]);
            else $this->form->fill();
        }

    }
    public function form(Form $form): Form
    {
        return $form
            ->model(Family::class)
            ->statePath('data')
            ->schema([
                Grid::make()
                    ->schema([
                        Section::make()
                            ->schema([
                                Fieldset::make('الأب')
                                    ->schema([
                                        self::getInput('father_name'),
                                        self::getSelect('father_city'),
                                        self::getDate('father_date'),
                                        self::getSelectEnum('father_academic'),
                                        self::getInput('father_job'),
                                        self::getRadio('is_father_life','هل الأب علي قيد الحياة ؟')
                                        ->default(null),
                                        self::getInput('father_dead_reason')
                                            ->visible(function (Get $get){return $get('is_father_life')==0 && $get('is_father_life')!=null;}),
                                        self::getDate('father_dead_date')
                                            ->visible(function (Get $get){return $get('is_father_life')==0 && $get('is_father_life')!=null;}),
                                    ])->columns(1),
                                Fieldset::make('الأم')
                                    ->schema([
                                        self::getInput('mother_name'),
                                        self::getSelect('mother_city'),
                                        self::getDate('mother_date'),
                                        self::getSelectEnum('mother_academic')
                                           ,
                                        self::getInput('mother_job'),
                                        self::getRadio('is_mother_life','هل الأم علي قيد الحياة ؟'),
                                        self::getInput('mother_dead_reason')
                                            ->visible(function (Get $get){return $get('is_mother_life')!=null && $get('is_mother_life')==0;}),
                                        self::getDate('mother_dead_date')
                                            ->visible(function (Get $get){return $get('is_mother_life')!=null && $get('is_mother_life')==0;}),
                                        self::getInput('number_of_marriages')->numeric()->minValue(1),
                                        self::getInput('number_of_separation')->numeric(),
                                        self::getInput('number_of_pregnancies')->numeric()->minValue(1),
                                        self::getInput('number_of_miscarriages')->numeric(),
                                    ])->columns(1),
                                Fieldset::make('هل تعرض أحد الوالدين لامراض مزمنة او اصابات اخري ?')
                                    ->schema([
                                        self::getRadio('father_chronic_diseases','الأب'),
                                        self::getRadio('mother_chronic_diseases','الام'),
                                    ])->columns(1),
                                self::getRadio('is_parent_relationship'),
                                self::getSelect('father_blood_type','فصيلة دم الأب'),
                                self::getSelect('mother_blood_type','فصيلة دم الأم'),
                                self::getSelectEnum('parent_relationship_nature'),


                                self::getDiseaseSelect(),
                                self::getSelectEnum('family_salary'),
                                self::getSelectEnum('family_sources'),
                                self::getRadio('house_type'),
                                self::getRadio('house_narrow'),
                                self::getRadio('house_health'),
                                self::getRadio('house_old'),
                                self::getRadio('house_own'),
                                self::getRadio('is_house_good'),
                                self::getInput('house_rooms','عدد الحجرات')->numeric()->minValue(1),
                                self::getRadio('is_room_single'),
                                Textarea::make('other_family_notes')
                                    ->label('معلومات أخري'),
                                Hidden::make('user_id')
                                    ->default(Auth::id()),
                            ])->columns(1)
                    ])
                    ->columns(1)
                    ->columnSpan(1)
            ])->columns(3) ;

    }
}
